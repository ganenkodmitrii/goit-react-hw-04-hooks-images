{"version":3,"sources":["components/Searchbar/Searchbar.js","components/ImageAPI/ImageAPI.js","components/ImageGalleryItem/ImageGalleryItem.js","components/Modal/Modal.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Loading/Loading.js","components/ImagesError/ImagesError.js","components/ImagesNotFound/ImagesNotFound.js","components/ImageInfo/ImageInfo.js","App.js","index.js"],"names":["Searchbar","formSubmitHandler","useState","search","setSearch","reset","className","onSubmit","e","preventDefault","trim","toast","info","type","value","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","api","fetchImages","name","page","fetch","then","response","ok","json","Promise","reject","Error","ImageGalleryItem","webformatURL","largeImageURL","clickOnImageItem","onClick","src","url","alt","modalRoot","document","querySelector","Modal","onCloseModal","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","code","createPortal","event","target","ImageGallery","images","showModal","setShowModal","imageModal","setimageModal","openModal","map","el","id","style","height","Button","loadMoreBtn","propTypes","PropTypes","func","closeModal","contacts","arrayOf","shape","string","isRequired","bool","Loading","textAlign","color","width","timeout","ImagesErrorView","message","role","ImagesnotFound","ImageInfo","state","error","status","handleBtnChangePage","nextPage","setState","ImageAPI","props","searchImage","data","hits","handleScroll","setTimeout","scrollBy","top","documentElement","clientHeight","behavior","prevProps","prevState","this","catch","length","margin","padding","Component","App","setSearchImage","autoClose","position","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8fd26bb.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function Searchbar({ formSubmitHandler }) {\n    const [search, setSearch] = useState('');\n\n    const handleChange = e => {\n        setSearch(e.currentTarget.value.toLowerCase());\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (search.trim() === '') {\n            return toast.info('Ничего не ввели в поиск! :(');\n        }\n\n        formSubmitHandler(search);\n        reset();\n    };\n\n    const reset = () => {\n        setSearch('');\n    };\n\n    return (\n        <header className=\"Searchbar\">\n            <form onSubmit={handleSubmit} className=\"SearchForm\">\n                <input\n                    className=\"SearchForm-input\"\n                    type=\"text\"\n                    value={search}\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Поиск\"\n                    onChange={handleChange}\n                />\n\n                <button type=\"submit\" className=\"SearchForm-button\">\n                    <span className=\"SearchForm-button-label\">Search</span>\n                </button>\n            </form>\n        </header>\n    );\n}\n\nSearchbar.propTypes = {\n    search: PropTypes.string,\n    formSubmitHandler: PropTypes.func,\n};\n","function fetchImages(name, page) {\n    const BASE_URL = 'https://pixabay.com/api/';\n    const API_KEY = '19044793-8d0b89c981ce143090a5b157d';\n\n    return fetch(\n        `${BASE_URL}?key=${API_KEY}&page=${page}&image_type=photo&orientation=horizontal&per_page=12&q=${name}`,\n    ).then(response => {\n        if (response.ok) {\n            return response.json();\n        }\n        return Promise.reject(new Error('Что-то пошло не так'));\n    });\n}\n\nconst api = {\n    fetchImages,\n};\nexport default api;\n","import PropTypes from 'prop-types';\n\nexport default function ImageGalleryItem({\n    webformatURL,\n    largeImageURL,\n    clickOnImageItem,\n}) {\n    return (\n        <li\n            onClick={() => clickOnImageItem(largeImageURL)}\n            className=\"ImageGalleryItem\"\n        >\n            <img\n                src={webformatURL}\n                url={largeImageURL}\n                alt=\"\"\n                className=\"ImageGalleryItem-image\"\n            />\n        </li>\n    );\n}\nImageGalleryItem.propTypes = {\n    webformatURL: PropTypes.string,\n    largeImageURL: PropTypes.string,\n    clickOnImageItem: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport PropTypes from 'prop-types';\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ onCloseModal, children }) {\n    useEffect(() => {\n        window.addEventListener('keydown', handleKeyDown);\n        return function remove() {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    });\n\n    const handleKeyDown = e => {\n        if (e.code === 'Escape') {\n            // console.log('Нажали ESC, нужно закрыть модалку');\n\n            onCloseModal();\n        }\n    };\n\n    const handleBackdropClick = event => {\n        // console.log('Кликнули в бекдроп');\n\n        // console.log('currentTarget: ', event.currentTarget);\n        // console.log('target: ', event.target);\n\n        if (event.currentTarget === event.target) {\n            onCloseModal();\n        }\n    };\n\n    return createPortal(\n        <div className=\"Overlay\" onClick={handleBackdropClick}>\n            <div className=\"Modal\">{children}</div>\n        </div>,\n        modalRoot,\n    );\n}\n\nModal.propTypes = {\n    onCloseModal: PropTypes.func,\n    children: PropTypes.node,\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ImageGalleryItem from '../ImageGalleryItem';\nimport Modal from '../Modal';\n\nexport default function ImageGallery({ images }) {\n    const [showModal, setShowModal] = useState(false);\n    const [imageModal, setimageModal] = useState('');\n\n    const openModal = largeImageURL => {\n        setShowModal(true);\n        setimageModal(largeImageURL);\n    };\n\n    const closeModal = () => {\n        setShowModal(false);\n    };\n\n    return (\n        <>\n            <ul className=\"ImageGallery\">\n                {images.map(el => (\n                    <ImageGalleryItem\n                        key={el.id}\n                        webformatURL={el.webformatURL}\n                        largeImageURL={el.largeImageURL}\n                        clickOnImageItem={openModal}\n                    />\n                ))}\n            </ul>\n            {showModal && (\n                <Modal onCloseModal={closeModal}>\n                    {<img style={{ height: 540 }} src={imageModal} alt=\"\" />}\n                </Modal>\n            )}\n        </>\n    );\n}\n\nImageGalleryItem.propTypes = {\n    openModal: PropTypes.func,\n    closeModal: PropTypes.func,\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n            webformatURL: PropTypes.string.isRequired,\n            largeImageURL: PropTypes.string.isRequired,\n            id: PropTypes.string.isRequired,\n        }),\n    ),\n\n    showModal: PropTypes.bool,\n    imageModal: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nexport default function Button({ loadMoreBtn }) {\n    return (\n        <div className=\"BoxBtn\">\n            <button type=\"button\" className=\"Button\" onClick={loadMoreBtn}>\n                Load more\n            </button>\n        </div>\n    );\n}\nButton.propTypes = {\n    loadMoreBtn: PropTypes.func,\n};\n","import Loader from 'react-loader-spinner';\nexport default function Loading() {\n    return (\n        <div style={{ textAlign: 'center' }}>\n            <Loader\n                type=\"Circles\"\n                color=\"#00BFFF\"\n                height={100}\n                width={100}\n                timeout={3000} //3 secs\n            />\n        </div>\n    );\n}\n","import PropTypes from 'prop-types';\n\nexport default function ImagesErrorView({ message }) {\n    return (\n        <div role=\"alert\">\n            <p>Извините, что-то пошло не так. Error: {message}</p>\n        </div>\n    );\n}\nImagesErrorView.propTypes = {\n    message: PropTypes.string,\n};\n","export default function ImagesnotFound() {\n    return (\n        <div style={{ textAlign: 'center' }}>\n            <p>Картинки с таким именем нет</p>\n        </div>\n    );\n}\n","import { Component } from 'react';\nimport ImageAPI from '../ImageAPI/ImageAPI';\nimport PropTypes from 'prop-types';\nimport ImageGallery from '../ImageGallery';\nimport Button from '../Button';\nimport Loading from '../Loading';\nimport ImagesError from '../ImagesError';\nimport ImagesNotFound from '../ImagesNotFound';\n\nexport default class ImageInfo extends Component {\n    state = {\n        images: [],\n        error: null,\n        status: 'idle',\n        page: 1,\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.searchImage !== this.props.searchImage) {\n            this.setState({ status: 'pending', page: 1 });\n\n            ImageAPI.fetchImages(this.props.searchImage, this.state.page)\n                .then(data => {\n                    this.setState({\n                        images: data.hits,\n                        status: 'resolved',\n                    });\n                })\n                // ???Catch не работает :(\n                .catch(error => {\n                    this.setState({\n                        error: error,\n                        status: 'rejected',\n                    });\n                });\n        }\n    }\n\n    handleBtnChangePage = () => {\n        const nextPage = this.state.page + 1;\n        this.setState({\n            page: this.state.page + 1,\n        });\n\n        ImageAPI.fetchImages(this.props.searchImage, nextPage).then(data =>\n            this.setState(({ images }) => ({\n                images: [...images, ...data.hits],\n            })),\n        );\n\n        this.handleScroll();\n    };\n\n    handleScroll = () => {\n        setTimeout(() => {\n            window.scrollBy({\n                top: document.documentElement.clientHeight - 160,\n                behavior: 'smooth',\n            });\n        }, 1000);\n    };\n\n    render() {\n        const { images, error, status } = this.state;\n\n        if (status === 'idle') {\n            return <div style={{ textAlign: 'center' }}>Введите в поиск</div>;\n        }\n\n        if (status === 'pending') {\n            return <Loading />;\n        }\n\n        if (status === 'rejected') {\n            return <ImagesError message={error.message} />;\n        }\n\n        if (status === 'resolved') {\n            return images.length ? (\n                <div style={{ margin: '0 auto', padding: 10 }}>\n                    <ImageGallery images={images} />\n                    <Button loadMoreBtn={this.handleBtnChangePage} />\n                </div>\n            ) : (\n                <ImagesNotFound />\n            );\n        }\n    }\n}\nImageInfo.propTypes = {\n    images: PropTypes.array,\n    error: PropTypes.string,\n    status: PropTypes.string,\n    page: PropTypes.number,\n    searchImage: PropTypes.string,\n};\n","import { useState } from 'react';\nimport { ToastContainer } from 'react-toastify';\n\nimport Searchbar from './components/Searchbar';\nimport ImageInfo from './components/ImageInfo';\n\nfunction App() {\n    const [searchImage, setSearchImage] = useState('');\n\n    const handleFormSubmit = searchImage => {\n        setSearchImage(searchImage);\n    };\n\n    return (\n        <div className=\"App\">\n            <Searchbar formSubmitHandler={handleFormSubmit} />\n            <ImageInfo searchImage={searchImage} />\n            <ToastContainer autoClose={2000} position=\"top-center\" />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}